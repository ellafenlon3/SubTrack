# -*- coding: utf-8 -*-
"""Econometrics Assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJYBaMz2HTiCyvLQm3j8SQL4NknZqA4P
"""

import streamlit as st

uploaded_file = st.file_uploader("Upload a file")
if uploaded_file is not None:
    data = uploaded_file.read()
    # process data here

import streamlit as st

st.set_page_config(page_title="SubTrack", layout="centered")

st.image("https://i.imgur.com/yl5N3UQ.png", width=120)  # Replace with your actual logo URL if needed

st.title("📅 SubTrack - Subscription Tracker")
st.markdown("Easily manage, track, and cancel your subscriptions in one place.")

st.header("🔧 Features")
st.markdown("""
- 📋 Track all your subscriptions in one dashboard
- 💸 See monthly spending summaries
- ❌ Cancel unwanted subscriptions easily
- 🔁 Get suggestions for cheaper alternatives
- ⏰ Receive reminders before free trials end
""")

st.markdown("---")

st

import pandas as pd

# Load the dataset directly from this chat (already uploaded)
df = pd.read_excel("Mock_Student_Subscription_Data Econometrics.xlsx")

# Show the first few rows
df.head()

# Mean monthly subscription cost
mean_cost = df['total_monthly_subscription_cost'].mean()
print("Average monthly subscription cost (€):", round(mean_cost, 2))

# % of users who cancelled a subscription
cancelled_pct = df['cancelled_any_subscription'].mean() * 100
print("Percentage of users who cancelled a subscription:", round(cancelled_pct, 1), "%")

# % who have forgotten a subscription
forgotten_pct = df['has_forgotten_subscription'].mean() * 100
print("Percentage of users with a forgotten subscription:", round(forgotten_pct, 1), "%")

# Step 1: Drop unnecessary columns
df.drop(columns=['last_modified_by', 'temp_notes', 'fake_status_flag'], inplace=True)

# Step 2: Standardize gender values (e.g., lowercase, strip spaces)
df['gender'] = df['gender'].str.strip().str.capitalize()

# Step 3: Handle missing values (drop rows with any NaNs for now)
df = df.dropna()

# Step 4: Filter age group 17–25
df = df[(df['age'] >= 17) & (df['age'] <= 25)]

# Confirm cleaning worked
df.info()

# List of popular services to look for
services = ['Netflix', 'Spotify', 'Amazon Prime', 'Disney+', 'YouTube Premium', 'Apple Music']

# Create binary flags for each service
for service in services:
    df[service.replace(" ", "_")] = df['subscription_types'].str.contains(service).astype(int)

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Re-encode gender for modeling
df_encoded = pd.get_dummies(df, columns=['gender'], drop_first=True)

# Add service-based features
X = df_encoded[[
    'age',
    'monthly_income',
    'num_subscriptions',
    'avg_monthly_usage_hrs',
    'has_forgotten_subscription',
    'used_free_trial_last_3_months',
    'received_reminders',
    'gender_Male',
    'gender_Other',
    'Netflix', 'Spotify', 'Amazon_Prime', 'Disney+', 'YouTube_Premium', 'Apple_Music'
]]

y = df_encoded['total_monthly_subscription_cost']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("NEW Mean Squared Error:", round(mse, 2))
print("NEW R² Score:", round(r2, 3))

# 1. average_cost_per_subscription
df['average_cost_per_subscription'] = df['total_monthly_subscription_cost'] / df['num_subscriptions']

# 2. income_ratio (how much of income goes to subscriptions)
df['income_ratio'] = df['total_monthly_subscription_cost'] / df['monthly_income']

# 3. has_high_usage (binary flag for students who use > 50 hrs/month)
df['has_high_usage'] = df['avg_monthly_usage_hrs'].apply(lambda x: 1 if x > 50 else 0)

# 4. subscription_count_per_type (basic version: count commas + 1 in 'subscription_types')
df['subscription_count_per_type'] = df['subscription_types'].apply(lambda x: x.count(',') + 1)

import pandas as pd
import matplotlib.pyplot as plt

# Base student example
starting_cost = df['total_monthly_subscription_cost'].mean()

# Simulate 6-month forecast
months = list(range(1, 7))
costs = [starting_cost + (i * 10) for i in range(6)]  # +€10 per new sub per month

# Create DataFrame
forecast_df = pd.DataFrame({
    'Month': months,
    'Projected_Cost (€)': costs
})

# Plot forecast
plt.plot(forecast_df['Month'], forecast_df['Projected_Cost (€)'], marker='o')
plt.title('Forecasted Subscription Cost Over 6 Months')
plt.xlabel('Month')
plt.ylabel('Projected Monthly Cost (€)')
plt.grid(True)
plt.show()

# Show forecast table
forecast_df